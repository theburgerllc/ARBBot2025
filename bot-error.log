{"level":"error","message":"Unhandled Rejection","promise":{},"reason":{"data":"0x08c379a0000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000204f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572","stackTrace":[{"functionType":1,"sourceReference":{"contract":"FlashArbBotBalancer","function":"setAuthorizedCaller","line":205,"range":[6536,6672],"sourceContent":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.24;\n\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\nimport \"@openzeppelin/contracts/security/ReentrancyGuard.sol\";\nimport \"@openzeppelin/contracts/security/Pausable.sol\";\n\ninterface IBalancerVault {\n    function flashLoan(\n        address recipient,\n        address[] calldata tokens,\n        uint256[] calldata amounts,\n        bytes calldata userData\n    ) external;\n    \n    function maxFlashLoan(address token) external view returns (uint256);\n}\n\ninterface IPoolAddressesProvider {\n    function getPool() external view returns (address);\n}\n\ninterface IPool {\n    function flashLoanSimple(\n        address receiverAddress,\n        address asset,\n        uint256 amount,\n        bytes calldata params,\n        uint16 referralCode\n    ) external;\n    \n    function getReserveData(address asset)\n        external\n        view\n        returns (\n            uint256 configuration,\n            uint128 liquidityIndex,\n            uint128 currentLiquidityRate,\n            uint128 variableBorrowIndex,\n            uint128 currentVariableBorrowRate,\n            uint128 currentStableBorrowRate,\n            uint40 lastUpdateTimestamp,\n            uint16 id,\n            address aTokenAddress,\n            address stableDebtTokenAddress,\n            address variableDebtTokenAddress,\n            address interestRateStrategyAddress,\n            uint128 accruedToTreasury,\n            uint128 unbacked,\n            uint128 isolationModeTotalDebt\n        );\n    \n    function FLASHLOAN_PREMIUM_TOTAL() external view returns (uint128);\n}\n\ninterface IFlashLoanSimpleReceiver {\n    function executeOperation(\n        address asset,\n        uint256 amount,\n        uint256 premium,\n        address initiator,\n        bytes calldata params\n    ) external returns (bool);\n}\n\ninterface IUniswapV2Router02 {\n    function swapExactTokensForTokens(\n        uint amountIn,\n        uint amountOutMin,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external returns (uint[] memory amounts);\n    \n    function getAmountsOut(uint amountIn, address[] calldata path)\n        external view returns (uint[] memory amounts);\n}\n\ninterface IUniswapV3Quoter {\n    function quoteExactInputSingle(\n        address tokenIn,\n        address tokenOut,\n        uint24 fee,\n        uint256 amountIn,\n        uint160 sqrtPriceLimitX96\n    ) external returns (uint256 amountOut);\n}\n\ninterface IAggregatorV3 {\n    function latestRoundData()\n        external\n        view\n        returns (\n            uint80 roundId,\n            int256 answer,\n            uint256 startedAt,\n            uint256 updatedAt,\n            uint80 answeredInRound\n        );\n}\n\ncontract FlashArbBotBalancer is Ownable, ReentrancyGuard, Pausable, IFlashLoanSimpleReceiver {\n    IBalancerVault public vault;\n    IPool public aavePool;\n    IUniswapV2Router02 public sushiRouter;\n    IUniswapV2Router02 public uniRouter;\n    IUniswapV3Quoter public uniV3Quoter;\n    \n    // Additional routers for extended functionality\n    IUniswapV2Router02 public uniV2RouterNew;\n    IUniswapV2Router02 public sushiRouterNew;\n    \n    // Token addresses - Arbitrum\n    address public constant WETH = 0x82aF49447D8a07e3bd95BD0d56f35241523fBab1;\n    address public constant USDC = 0xFF970A61A04b1cA14834A43f5dE4533eBDDB5CC8;\n    address public constant USDT = 0xFd086bC7CD5C481DCC9C85ebE478A1C0b69FCbb9;\n    address public constant WBTC = 0x2f2a2543B76A4166549F7aaB2e75Bef0aefC5B0f;\n    \n    // Router addresses - Arbitrum\n    address public constant UNI_V2_ROUTER_NEW = 0x4752ba5DBc23f44D87826276BF6Fd6b1C372aD24;\n    address public constant SUSHI_ROUTER_NEW = 0xf2614A233c7C3e7f08b1F887Ba133a13f1eb2c55;\n    \n    // Router addresses - Optimism\n    address public constant UNI_V2_ROUTER_OPT = 0x4A7b5Da61326A6379179b40d00F57E5bbDC962c2;\n    address public constant SUSHI_ROUTER_OPT = 0x2ABf469074dc0b54d793850807E6eb5Faf2625b1;\n    \n    // Aave V3 Pool addresses\n    address public constant AAVE_POOL_ARBITRUM = 0x794a61358D6845594F94dc1DB02A252b5b4814aD;\n    address public constant AAVE_POOL_OPTIMISM = 0x794a61358D6845594F94dc1DB02A252b5b4814aD;\n    \n    // Network identification\n    uint256 public currentChainId;\n    bool public isOptimism;\n    bool public isArbitrum;\n    \n    uint256 public constant MAX_SLIPPAGE = 500; // 5%\n    uint256 public constant MIN_PROFIT_BPS = 50; // 0.5%\n    uint256 public slippageTolerance = 200; // 2%\n    uint256 public minProfitBps = 30; // 0.3%\n    \n    mapping(address => address) public priceFeeds;\n    mapping(address => bool) public authorizedCallers;\n    \n    enum FlashLoanProvider { BALANCER, AAVE }\n    \n    event FlashLoanProviderSelected(FlashLoanProvider provider, address asset, uint256 amount);\n    \n    event ArbitrageExecuted(\n        address indexed asset,\n        uint256 amount,\n        uint256 profit,\n        bool sushiFirst\n    );\n    \n    event TriangularArbitrageExecuted(\n        address indexed tokenA,\n        address indexed tokenB,\n        address indexed tokenC,\n        uint256 amount,\n        uint256 profit\n    );\n    \n    event CrossChainOpportunityDetected(\n        uint256 indexed chainId,\n        address indexed asset,\n        uint256 spread,\n        uint256 estimatedProfit\n    );\n    \n    event ProfitWithdrawn(address indexed token, uint256 amount);\n    \n    modifier onlyAuthorized() {\n        require(authorizedCallers[msg.sender] || msg.sender == owner(), \"Not authorized\");\n        _;\n    }\n\n    constructor(\n        address _vault,\n        address _sushiRouter,\n        address _uniRouter,\n        address _uniV3Quoter\n    ) {\n        vault = IBalancerVault(_vault);\n        sushiRouter = IUniswapV2Router02(_sushiRouter);\n        uniRouter = IUniswapV2Router02(_uniRouter);\n        uniV3Quoter = IUniswapV3Quoter(_uniV3Quoter);\n        \n        // Initialize additional routers based on chain\n        currentChainId = block.chainid;\n        isArbitrum = currentChainId == 42161;\n        isOptimism = currentChainId == 10;\n        \n        if (isArbitrum) {\n            uniV2RouterNew = IUniswapV2Router02(UNI_V2_ROUTER_NEW);\n            sushiRouterNew = IUniswapV2Router02(SUSHI_ROUTER_NEW);\n            aavePool = IPool(AAVE_POOL_ARBITRUM);\n        } else if (isOptimism) {\n            uniV2RouterNew = IUniswapV2Router02(UNI_V2_ROUTER_OPT);\n            sushiRouterNew = IUniswapV2Router02(SUSHI_ROUTER_OPT);\n            aavePool = IPool(AAVE_POOL_OPTIMISM);\n        }\n    }\n\n    function setAuthorizedCaller(address caller, bool authorized) external onlyOwner {\n        authorizedCallers[caller] = authorized;\n    }\n    \n    function setSlippageTolerance(uint256 _slippage) external onlyOwner {\n        require(_slippage <= MAX_SLIPPAGE, \"Slippage too high\");\n        slippageTolerance = _slippage;\n    }\n    \n    function setMinProfitBps(uint256 _minProfit) external onlyOwner {\n        require(_minProfit > 0, \"Min profit must be positive\");\n        minProfitBps = _minProfit;\n    }\n    \n    function setPriceFeed(address token, address feed) external onlyOwner {\n        priceFeeds[token] = feed;\n    }\n\n    function executeArb(\n        address asset,\n        uint256 amount,\n        address[] calldata path,\n        bool sushiFirst,\n        uint256 expectedProfit\n    ) external onlyAuthorized whenNotPaused nonReentrant {\n        require(path.length >= 2, \"Invalid path\");\n        require(amount > 0, \"Amount must be positive\");\n        require(expectedProfit > 0, \"Expected profit must be positive\");\n        \n        FlashLoanProvider provider = _selectOptimalProvider(asset, amount);\n        \n        if (provider == FlashLoanProvider.BALANCER) {\n            _executeBalancerFlashLoan(asset, amount, path, sushiFirst, expectedProfit, false);\n        } else {\n            _executeAaveFlashLoan(asset, amount, path, sushiFirst, expectedProfit, false);\n        }\n    }\n    \n    function executeTriangularArb(\n        address asset,\n        uint256 amount,\n        address[] calldata path,\n        uint256 expectedProfit\n    ) external onlyAuthorized whenNotPaused nonReentrant {\n        require(path.length == 4, \"Triangular path must have 4 tokens (A->B->C->A)\");\n        require(path[0] == path[3], \"Path must start and end with same token\");\n        require(amount > 0, \"Amount must be positive\");\n        require(expectedProfit > 0, \"Expected profit must be positive\");\n        \n        FlashLoanProvider provider = _selectOptimalProvider(asset, amount);\n        \n        if (provider == FlashLoanProvider.BALANCER) {\n            _executeBalancerFlashLoan(asset, amount, path, false, expectedProfit, true);\n        } else {\n            _executeAaveFlashLoan(asset, amount, path, false, expectedProfit, true);\n        }\n    }\n\n    function receiveFlashLoan(\n        address[] calldata tokens,\n        uint256[] calldata amounts,\n        uint256[] calldata feeAmounts,\n        bytes calldata userData\n    ) external {\n        require(msg.sender == address(vault), \"Only Balancer vault\");\n\n        (address[] memory path, bool sushiFirst, uint256 expectedProfit, bool isTriangular) = abi.decode(userData, (address[], bool, uint256, bool));\n        address asset = tokens[0];\n        uint256 amount = amounts[0];\n\n        require(_validatePriceFeeds(path), \"Invalid price feed\");\n\n        uint256 startingBal = IERC20(asset).balanceOf(address(this));\n        \n        if (isTriangular) {\n            _executeTriangularSwap(asset, amount, path);\n        } else {\n            _executeDualSwap(asset, amount, path, sushiFirst);\n        }\n\n        uint256 received = IERC20(asset).balanceOf(address(this));\n        uint256 totalOwed = amount + feeAmounts[0];\n        require(received >= totalOwed, \"Unprofitable\");\n        \n        uint256 profit = received - totalOwed;\n        uint256 minProfit = (amount * minProfitBps) / 10000;\n        require(profit >= minProfit, \"Profit too low\");\n        \n        require(profit >= expectedProfit * 95 / 100, \"Profit deviation too high\");\n\n        IERC20(asset).approve(address(vault), totalOwed);\n        \n        if (isTriangular) {\n            emit TriangularArbitrageExecuted(path[0], path[1], path[2], amount, profit);\n        } else {\n            emit ArbitrageExecuted(asset, amount, profit, sushiFirst);\n        }\n    }\n    \n    function _executeDualSwap(\n        address asset,\n        uint256 amount,\n        address[] memory path,\n        bool sushiFirst\n    ) internal {\n        IERC20(asset).approve(address(sushiRouter), amount);\n        IERC20(asset).approve(address(uniRouter), amount);\n        IERC20(asset).approve(address(uniV2RouterNew), amount);\n        IERC20(asset).approve(address(sushiRouterNew), amount);\n\n        uint256 intermediateAmount;\n        if (sushiFirst) {\n            uint256 minOut1 = _calculateMinOutput(amount, path, true);\n            uint256[] memory amounts1 = _getBestRouter(true).swapExactTokensForTokens(\n                amount, \n                minOut1, \n                path, \n                address(this), \n                block.timestamp + 300\n            );\n            intermediateAmount = amounts1[amounts1.length - 1];\n            \n            IERC20(path[1]).approve(address(_getBestRouter(false)), intermediateAmount);\n            address[] memory reversePath = _reverse(path);\n            uint256 minOut2 = _calculateMinOutput(intermediateAmount, reversePath, false);\n            _getBestRouter(false).swapExactTokensForTokens(\n                intermediateAmount, \n                minOut2, \n                reversePath, \n                address(this), \n                block.timestamp + 300\n            );\n        } else {\n            uint256 minOut1 = _calculateMinOutput(amount, path, false);\n            uint256[] memory amounts1 = _getBestRouter(false).swapExactTokensForTokens(\n                amount, \n                minOut1, \n                path, \n                address(this), \n                block.timestamp + 300\n            );\n            intermediateAmount = amounts1[amounts1.length - 1];\n            \n            IERC20(path[1]).approve(address(_getBestRouter(true)), intermediateAmount);\n            address[] memory reversePath = _reverse(path);\n            uint256 minOut2 = _calculateMinOutput(intermediateAmount, reversePath, true);\n            _getBestRouter(true).swapExactTokensForTokens(\n                intermediateAmount, \n                minOut2, \n                reversePath, \n                address(this), \n                block.timestamp + 300\n            );\n        }\n    }\n    \n    function _executeTriangularSwap(\n        address asset,\n        uint256 amount,\n        address[] memory path\n    ) internal {\n        // Approve all routers\n        IERC20(asset).approve(address(uniV2RouterNew), amount);\n        IERC20(asset).approve(address(sushiRouterNew), amount);\n        \n        // Step 1: A -> B\n        address[] memory pathAB = new address[](2);\n        pathAB[0] = path[0];\n        pathAB[1] = path[1];\n        \n        uint256 minOut1 = _calculateMinOutput(amount, pathAB, false);\n        uint256[] memory amounts1 = uniV2RouterNew.swapExactTokensForTokens(\n            amount,\n            minOut1,\n            pathAB,\n            address(this),\n            block.timestamp + 300\n        );\n        uint256 amountB = amounts1[amounts1.length - 1];\n        \n        // Step 2: B -> C\n        address[] memory pathBC = new address[](2);\n        pathBC[0] = path[1];\n        pathBC[1] = path[2];\n        \n        IERC20(path[1]).approve(address(sushiRouterNew), amountB);\n        uint256 minOut2 = _calculateMinOutput(amountB, pathBC, true);\n        uint256[] memory amounts2 = sushiRouterNew.swapExactTokensForTokens(\n            amountB,\n            minOut2,\n            pathBC,\n            address(this),\n            block.timestamp + 300\n        );\n        uint256 amountC = amounts2[amounts2.length - 1];\n        \n        // Step 3: C -> A\n        address[] memory pathCA = new address[](2);\n        pathCA[0] = path[2];\n        pathCA[1] = path[0];\n        \n        IERC20(path[2]).approve(address(uniV2RouterNew), amountC);\n        uint256 minOut3 = _calculateMinOutput(amountC, pathCA, false);\n        uniV2RouterNew.swapExactTokensForTokens(\n            amountC,\n            minOut3,\n            pathCA,\n            address(this),\n            block.timestamp + 300\n        );\n    }\n    \n    function _getBestRouter(bool useSushi) internal view returns (IUniswapV2Router02) {\n        if (useSushi) {\n            return address(sushiRouterNew) != address(0) ? sushiRouterNew : sushiRouter;\n        } else {\n            return address(uniV2RouterNew) != address(0) ? uniV2RouterNew : uniRouter;\n        }\n    }\n\n    function _calculateMinOutput(\n        uint256 amountIn, \n        address[] memory path, \n        bool useSushi\n    ) internal view returns (uint256) {\n        uint256[] memory amounts;\n        IUniswapV2Router02 router = _getBestRouter(useSushi);\n        amounts = router.getAmountsOut(amountIn, path);\n        \n        uint256 expectedOut = amounts[amounts.length - 1];\n        return expectedOut * (10000 - slippageTolerance) / 10000;\n    }\n    \n    function _validatePriceFeeds(address[] memory path) internal view returns (bool) {\n        for (uint256 i = 0; i < path.length; i++) {\n            if (priceFeeds[path[i]] != address(0)) {\n                IAggregatorV3 priceFeed = IAggregatorV3(priceFeeds[path[i]]);\n                (, int256 price, , uint256 updatedAt, ) = priceFeed.latestRoundData();\n                require(price > 0, \"Invalid price\");\n                require(block.timestamp - updatedAt < 3600, \"Price too old\");\n            }\n        }\n        return true;\n    }\n    \n    function _selectOptimalProvider(address asset, uint256 amount) internal view returns (FlashLoanProvider) {\n        uint256 balancerMaxLoan = vault.maxFlashLoan(asset);\n        \n        if (balancerMaxLoan >= amount) {\n            return FlashLoanProvider.BALANCER;\n        }\n        \n        return FlashLoanProvider.AAVE;\n    }\n    \n    function _executeBalancerFlashLoan(\n        address asset,\n        uint256 amount,\n        address[] memory path,\n        bool sushiFirst,\n        uint256 expectedProfit,\n        bool isTriangular\n    ) internal {\n        address[] memory assets = new address[](1);\n        assets[0] = asset;\n        uint256[] memory amounts = new uint256[](1);\n        amounts[0] = amount;\n        \n        bytes memory userData = abi.encode(path, sushiFirst, expectedProfit, isTriangular);\n        \n        emit FlashLoanProviderSelected(FlashLoanProvider.BALANCER, asset, amount);\n        vault.flashLoan(address(this), assets, amounts, userData);\n    }\n    \n    function _executeAaveFlashLoan(\n        address asset,\n        uint256 amount,\n        address[] memory path,\n        bool sushiFirst,\n        uint256 expectedProfit,\n        bool isTriangular\n    ) internal {\n        bytes memory params = abi.encode(path, sushiFirst, expectedProfit, isTriangular);\n        \n        emit FlashLoanProviderSelected(FlashLoanProvider.AAVE, asset, amount);\n        aavePool.flashLoanSimple(address(this), asset, amount, params, 0);\n    }\n    \n    function executeOperation(\n        address asset,\n        uint256 amount,\n        uint256 premium,\n        address initiator,\n        bytes calldata params\n    ) external override returns (bool) {\n        require(msg.sender == address(aavePool), \"Only Aave pool\");\n        require(initiator == address(this), \"Invalid initiator\");\n        \n        (address[] memory path, bool sushiFirst, uint256 expectedProfit, bool isTriangular) = abi.decode(params, (address[], bool, uint256, bool));\n        \n        require(_validatePriceFeeds(path), \"Invalid price feed\");\n        \n        uint256 startingBal = IERC20(asset).balanceOf(address(this));\n        \n        if (isTriangular) {\n            _executeTriangularSwap(asset, amount, path);\n        } else {\n            _executeDualSwap(asset, amount, path, sushiFirst);\n        }\n        \n        uint256 received = IERC20(asset).balanceOf(address(this));\n        uint256 totalOwed = amount + premium;\n        require(received >= totalOwed, \"Unprofitable\");\n        \n        uint256 profit = received - totalOwed;\n        uint256 minProfitAdjusted = _calculateMinProfitWithFee(amount, premium);\n        require(profit >= minProfitAdjusted, \"Profit too low\");\n        \n        require(profit >= expectedProfit * 90 / 100, \"Profit deviation too high\");\n        \n        IERC20(asset).approve(address(aavePool), totalOwed);\n        \n        if (isTriangular) {\n            emit TriangularArbitrageExecuted(path[0], path[1], path[2], amount, profit);\n        } else {\n            emit ArbitrageExecuted(asset, amount, profit, sushiFirst);\n        }\n        \n        return true;\n    }\n    \n    function _calculateMinProfitWithFee(uint256 amount, uint256 premium) internal view returns (uint256) {\n        uint256 baseMinProfit = (amount * minProfitBps) / 10000;\n        return baseMinProfit + premium;\n    }\n\n    function withdraw(address token) external onlyOwner {\n        uint256 balance = IERC20(token).balanceOf(address(this));\n        require(balance > 0, \"No balance to withdraw\");\n        IERC20(token).transfer(owner(), balance);\n        emit ProfitWithdrawn(token, balance);\n    }\n    \n    function emergencyWithdraw(address token) external onlyOwner {\n        uint256 balance = IERC20(token).balanceOf(address(this));\n        if (balance > 0) {\n            IERC20(token).transfer(owner(), balance);\n        }\n    }\n    \n    function pause() external onlyOwner {\n        _pause();\n    }\n    \n    function unpause() external onlyOwner {\n        _unpause();\n    }\n\n    function _reverse(address[] memory path) internal pure returns (address[] memory rev) {\n        rev = new address[](path.length);\n        for (uint256 i = 0; i < path.length; i++) {\n            rev[i] = path[path.length - 1 - i];\n        }\n    }\n    \n    function simulateArbitrage(\n        address asset,\n        uint256 amount,\n        address[] calldata path,\n        bool sushiFirst\n    ) external view returns (uint256 profit) {\n        uint256[] memory amounts1;\n        uint256[] memory amounts2;\n        \n        IUniswapV2Router02 router1 = _getBestRouter(sushiFirst);\n        IUniswapV2Router02 router2 = _getBestRouter(!sushiFirst);\n        \n        if (sushiFirst) {\n            amounts1 = router1.getAmountsOut(amount, path);\n            amounts2 = router2.getAmountsOut(amounts1[amounts1.length - 1], _reverse(path));\n        } else {\n            amounts1 = router2.getAmountsOut(amount, path);\n            amounts2 = router1.getAmountsOut(amounts1[amounts1.length - 1], _reverse(path));\n        }\n        \n        uint256 finalAmount = amounts2[amounts2.length - 1];\n        if (finalAmount > amount) {\n            profit = finalAmount - amount;\n            \n            uint256 aaveFee = _calculateAaveFee(amount);\n            if (profit > aaveFee) {\n                profit = profit - aaveFee;\n            } else {\n                profit = 0;\n            }\n        } else {\n            profit = 0;\n        }\n    }\n    \n    function _calculateAaveFee(uint256 amount) internal view returns (uint256) {\n        uint128 feeBps = aavePool.FLASHLOAN_PREMIUM_TOTAL();\n        return (amount * feeBps) / 10000;\n    }\n    \n    function getOptimalProvider(address asset, uint256 amount) external view returns (FlashLoanProvider provider, uint256 fee) {\n        provider = _selectOptimalProvider(asset, amount);\n        \n        if (provider == FlashLoanProvider.BALANCER) {\n            fee = 0;\n        } else {\n            fee = _calculateAaveFee(amount);\n        }\n    }\n    \n    function simulateTriangularArbitrage(\n        address asset,\n        uint256 amount,\n        address[] calldata path\n    ) external view returns (uint256 profit) {\n        require(path.length == 4, \"Triangular path must have 4 tokens\");\n        require(path[0] == path[3], \"Path must start and end with same token\");\n        \n        // Step 1: A -> B\n        address[] memory pathAB = new address[](2);\n        pathAB[0] = path[0];\n        pathAB[1] = path[1];\n        uint256[] memory amounts1 = uniV2RouterNew.getAmountsOut(amount, pathAB);\n        uint256 amountB = amounts1[amounts1.length - 1];\n        \n        // Step 2: B -> C\n        address[] memory pathBC = new address[](2);\n        pathBC[0] = path[1];\n        pathBC[1] = path[2];\n        uint256[] memory amounts2 = sushiRouterNew.getAmountsOut(amountB, pathBC);\n        uint256 amountC = amounts2[amounts2.length - 1];\n        \n        // Step 3: C -> A\n        address[] memory pathCA = new address[](2);\n        pathCA[0] = path[2];\n        pathCA[1] = path[0];\n        uint256[] memory amounts3 = uniV2RouterNew.getAmountsOut(amountC, pathCA);\n        uint256 finalAmount = amounts3[amounts3.length - 1];\n        \n        if (finalAmount > amount) {\n            profit = finalAmount - amount;\n        } else {\n            profit = 0;\n        }\n    }\n}\n","sourceName":"contracts/FlashArbBotBalancer.sol"},"type":0},{"functionType":5,"sourceReference":{"contract":"FlashArbBotBalancer","function":"onlyOwner","line":35,"range":[1063,1125],"sourceContent":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby disabling any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n","sourceName":"@openzeppelin/contracts/access/Ownable.sol"},"type":0},{"isInvalidOpcodeError":false,"returnData":{"0":8,"1":195,"2":121,"3":160,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0,"30":0,"31":0,"32":0,"33":0,"34":0,"35":32,"36":0,"37":0,"38":0,"39":0,"40":0,"41":0,"42":0,"43":0,"44":0,"45":0,"46":0,"47":0,"48":0,"49":0,"50":0,"51":0,"52":0,"53":0,"54":0,"55":0,"56":0,"57":0,"58":0,"59":0,"60":0,"61":0,"62":0,"63":0,"64":0,"65":0,"66":0,"67":32,"68":79,"69":119,"70":110,"71":97,"72":98,"73":108,"74":101,"75":58,"76":32,"77":99,"78":97,"79":108,"80":108,"81":101,"82":114,"83":32,"84":105,"85":115,"86":32,"87":110,"88":111,"89":116,"90":32,"91":116,"92":104,"93":101,"94":32,"95":111,"96":119,"97":110,"98":101,"99":114},"sourceReference":{"contract":"FlashArbBotBalancer","function":"setAuthorizedCaller","line":205,"range":[6536,6672],"sourceContent":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.24;\n\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\nimport \"@openzeppelin/contracts/security/ReentrancyGuard.sol\";\nimport \"@openzeppelin/contracts/security/Pausable.sol\";\n\ninterface IBalancerVault {\n    function flashLoan(\n        address recipient,\n        address[] calldata tokens,\n        uint256[] calldata amounts,\n        bytes calldata userData\n    ) external;\n    \n    function maxFlashLoan(address token) external view returns (uint256);\n}\n\ninterface IPoolAddressesProvider {\n    function getPool() external view returns (address);\n}\n\ninterface IPool {\n    function flashLoanSimple(\n        address receiverAddress,\n        address asset,\n        uint256 amount,\n        bytes calldata params,\n        uint16 referralCode\n    ) external;\n    \n    function getReserveData(address asset)\n        external\n        view\n        returns (\n            uint256 configuration,\n            uint128 liquidityIndex,\n            uint128 currentLiquidityRate,\n            uint128 variableBorrowIndex,\n            uint128 currentVariableBorrowRate,\n            uint128 currentStableBorrowRate,\n            uint40 lastUpdateTimestamp,\n            uint16 id,\n            address aTokenAddress,\n            address stableDebtTokenAddress,\n            address variableDebtTokenAddress,\n            address interestRateStrategyAddress,\n            uint128 accruedToTreasury,\n            uint128 unbacked,\n            uint128 isolationModeTotalDebt\n        );\n    \n    function FLASHLOAN_PREMIUM_TOTAL() external view returns (uint128);\n}\n\ninterface IFlashLoanSimpleReceiver {\n    function executeOperation(\n        address asset,\n        uint256 amount,\n        uint256 premium,\n        address initiator,\n        bytes calldata params\n    ) external returns (bool);\n}\n\ninterface IUniswapV2Router02 {\n    function swapExactTokensForTokens(\n        uint amountIn,\n        uint amountOutMin,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external returns (uint[] memory amounts);\n    \n    function getAmountsOut(uint amountIn, address[] calldata path)\n        external view returns (uint[] memory amounts);\n}\n\ninterface IUniswapV3Quoter {\n    function quoteExactInputSingle(\n        address tokenIn,\n        address tokenOut,\n        uint24 fee,\n        uint256 amountIn,\n        uint160 sqrtPriceLimitX96\n    ) external returns (uint256 amountOut);\n}\n\ninterface IAggregatorV3 {\n    function latestRoundData()\n        external\n        view\n        returns (\n            uint80 roundId,\n            int256 answer,\n            uint256 startedAt,\n            uint256 updatedAt,\n            uint80 answeredInRound\n        );\n}\n\ncontract FlashArbBotBalancer is Ownable, ReentrancyGuard, Pausable, IFlashLoanSimpleReceiver {\n    IBalancerVault public vault;\n    IPool public aavePool;\n    IUniswapV2Router02 public sushiRouter;\n    IUniswapV2Router02 public uniRouter;\n    IUniswapV3Quoter public uniV3Quoter;\n    \n    // Additional routers for extended functionality\n    IUniswapV2Router02 public uniV2RouterNew;\n    IUniswapV2Router02 public sushiRouterNew;\n    \n    // Token addresses - Arbitrum\n    address public constant WETH = 0x82aF49447D8a07e3bd95BD0d56f35241523fBab1;\n    address public constant USDC = 0xFF970A61A04b1cA14834A43f5dE4533eBDDB5CC8;\n    address public constant USDT = 0xFd086bC7CD5C481DCC9C85ebE478A1C0b69FCbb9;\n    address public constant WBTC = 0x2f2a2543B76A4166549F7aaB2e75Bef0aefC5B0f;\n    \n    // Router addresses - Arbitrum\n    address public constant UNI_V2_ROUTER_NEW = 0x4752ba5DBc23f44D87826276BF6Fd6b1C372aD24;\n    address public constant SUSHI_ROUTER_NEW = 0xf2614A233c7C3e7f08b1F887Ba133a13f1eb2c55;\n    \n    // Router addresses - Optimism\n    address public constant UNI_V2_ROUTER_OPT = 0x4A7b5Da61326A6379179b40d00F57E5bbDC962c2;\n    address public constant SUSHI_ROUTER_OPT = 0x2ABf469074dc0b54d793850807E6eb5Faf2625b1;\n    \n    // Aave V3 Pool addresses\n    address public constant AAVE_POOL_ARBITRUM = 0x794a61358D6845594F94dc1DB02A252b5b4814aD;\n    address public constant AAVE_POOL_OPTIMISM = 0x794a61358D6845594F94dc1DB02A252b5b4814aD;\n    \n    // Network identification\n    uint256 public currentChainId;\n    bool public isOptimism;\n    bool public isArbitrum;\n    \n    uint256 public constant MAX_SLIPPAGE = 500; // 5%\n    uint256 public constant MIN_PROFIT_BPS = 50; // 0.5%\n    uint256 public slippageTolerance = 200; // 2%\n    uint256 public minProfitBps = 30; // 0.3%\n    \n    mapping(address => address) public priceFeeds;\n    mapping(address => bool) public authorizedCallers;\n    \n    enum FlashLoanProvider { BALANCER, AAVE }\n    \n    event FlashLoanProviderSelected(FlashLoanProvider provider, address asset, uint256 amount);\n    \n    event ArbitrageExecuted(\n        address indexed asset,\n        uint256 amount,\n        uint256 profit,\n        bool sushiFirst\n    );\n    \n    event TriangularArbitrageExecuted(\n        address indexed tokenA,\n        address indexed tokenB,\n        address indexed tokenC,\n        uint256 amount,\n        uint256 profit\n    );\n    \n    event CrossChainOpportunityDetected(\n        uint256 indexed chainId,\n        address indexed asset,\n        uint256 spread,\n        uint256 estimatedProfit\n    );\n    \n    event ProfitWithdrawn(address indexed token, uint256 amount);\n    \n    modifier onlyAuthorized() {\n        require(authorizedCallers[msg.sender] || msg.sender == owner(), \"Not authorized\");\n        _;\n    }\n\n    constructor(\n        address _vault,\n        address _sushiRouter,\n        address _uniRouter,\n        address _uniV3Quoter\n    ) {\n        vault = IBalancerVault(_vault);\n        sushiRouter = IUniswapV2Router02(_sushiRouter);\n        uniRouter = IUniswapV2Router02(_uniRouter);\n        uniV3Quoter = IUniswapV3Quoter(_uniV3Quoter);\n        \n        // Initialize additional routers based on chain\n        currentChainId = block.chainid;\n        isArbitrum = currentChainId == 42161;\n        isOptimism = currentChainId == 10;\n        \n        if (isArbitrum) {\n            uniV2RouterNew = IUniswapV2Router02(UNI_V2_ROUTER_NEW);\n            sushiRouterNew = IUniswapV2Router02(SUSHI_ROUTER_NEW);\n            aavePool = IPool(AAVE_POOL_ARBITRUM);\n        } else if (isOptimism) {\n            uniV2RouterNew = IUniswapV2Router02(UNI_V2_ROUTER_OPT);\n            sushiRouterNew = IUniswapV2Router02(SUSHI_ROUTER_OPT);\n            aavePool = IPool(AAVE_POOL_OPTIMISM);\n        }\n    }\n\n    function setAuthorizedCaller(address caller, bool authorized) external onlyOwner {\n        authorizedCallers[caller] = authorized;\n    }\n    \n    function setSlippageTolerance(uint256 _slippage) external onlyOwner {\n        require(_slippage <= MAX_SLIPPAGE, \"Slippage too high\");\n        slippageTolerance = _slippage;\n    }\n    \n    function setMinProfitBps(uint256 _minProfit) external onlyOwner {\n        require(_minProfit > 0, \"Min profit must be positive\");\n        minProfitBps = _minProfit;\n    }\n    \n    function setPriceFeed(address token, address feed) external onlyOwner {\n        priceFeeds[token] = feed;\n    }\n\n    function executeArb(\n        address asset,\n        uint256 amount,\n        address[] calldata path,\n        bool sushiFirst,\n        uint256 expectedProfit\n    ) external onlyAuthorized whenNotPaused nonReentrant {\n        require(path.length >= 2, \"Invalid path\");\n        require(amount > 0, \"Amount must be positive\");\n        require(expectedProfit > 0, \"Expected profit must be positive\");\n        \n        FlashLoanProvider provider = _selectOptimalProvider(asset, amount);\n        \n        if (provider == FlashLoanProvider.BALANCER) {\n            _executeBalancerFlashLoan(asset, amount, path, sushiFirst, expectedProfit, false);\n        } else {\n            _executeAaveFlashLoan(asset, amount, path, sushiFirst, expectedProfit, false);\n        }\n    }\n    \n    function executeTriangularArb(\n        address asset,\n        uint256 amount,\n        address[] calldata path,\n        uint256 expectedProfit\n    ) external onlyAuthorized whenNotPaused nonReentrant {\n        require(path.length == 4, \"Triangular path must have 4 tokens (A->B->C->A)\");\n        require(path[0] == path[3], \"Path must start and end with same token\");\n        require(amount > 0, \"Amount must be positive\");\n        require(expectedProfit > 0, \"Expected profit must be positive\");\n        \n        FlashLoanProvider provider = _selectOptimalProvider(asset, amount);\n        \n        if (provider == FlashLoanProvider.BALANCER) {\n            _executeBalancerFlashLoan(asset, amount, path, false, expectedProfit, true);\n        } else {\n            _executeAaveFlashLoan(asset, amount, path, false, expectedProfit, true);\n        }\n    }\n\n    function receiveFlashLoan(\n        address[] calldata tokens,\n        uint256[] calldata amounts,\n        uint256[] calldata feeAmounts,\n        bytes calldata userData\n    ) external {\n        require(msg.sender == address(vault), \"Only Balancer vault\");\n\n        (address[] memory path, bool sushiFirst, uint256 expectedProfit, bool isTriangular) = abi.decode(userData, (address[], bool, uint256, bool));\n        address asset = tokens[0];\n        uint256 amount = amounts[0];\n\n        require(_validatePriceFeeds(path), \"Invalid price feed\");\n\n        uint256 startingBal = IERC20(asset).balanceOf(address(this));\n        \n        if (isTriangular) {\n            _executeTriangularSwap(asset, amount, path);\n        } else {\n            _executeDualSwap(asset, amount, path, sushiFirst);\n        }\n\n        uint256 received = IERC20(asset).balanceOf(address(this));\n        uint256 totalOwed = amount + feeAmounts[0];\n        require(received >= totalOwed, \"Unprofitable\");\n        \n        uint256 profit = received - totalOwed;\n        uint256 minProfit = (amount * minProfitBps) / 10000;\n        require(profit >= minProfit, \"Profit too low\");\n        \n        require(profit >= expectedProfit * 95 / 100, \"Profit deviation too high\");\n\n        IERC20(asset).approve(address(vault), totalOwed);\n        \n        if (isTriangular) {\n            emit TriangularArbitrageExecuted(path[0], path[1], path[2], amount, profit);\n        } else {\n            emit ArbitrageExecuted(asset, amount, profit, sushiFirst);\n        }\n    }\n    \n    function _executeDualSwap(\n        address asset,\n        uint256 amount,\n        address[] memory path,\n        bool sushiFirst\n    ) internal {\n        IERC20(asset).approve(address(sushiRouter), amount);\n        IERC20(asset).approve(address(uniRouter), amount);\n        IERC20(asset).approve(address(uniV2RouterNew), amount);\n        IERC20(asset).approve(address(sushiRouterNew), amount);\n\n        uint256 intermediateAmount;\n        if (sushiFirst) {\n            uint256 minOut1 = _calculateMinOutput(amount, path, true);\n            uint256[] memory amounts1 = _getBestRouter(true).swapExactTokensForTokens(\n                amount, \n                minOut1, \n                path, \n                address(this), \n                block.timestamp + 300\n            );\n            intermediateAmount = amounts1[amounts1.length - 1];\n            \n            IERC20(path[1]).approve(address(_getBestRouter(false)), intermediateAmount);\n            address[] memory reversePath = _reverse(path);\n            uint256 minOut2 = _calculateMinOutput(intermediateAmount, reversePath, false);\n            _getBestRouter(false).swapExactTokensForTokens(\n                intermediateAmount, \n                minOut2, \n                reversePath, \n                address(this), \n                block.timestamp + 300\n            );\n        } else {\n            uint256 minOut1 = _calculateMinOutput(amount, path, false);\n            uint256[] memory amounts1 = _getBestRouter(false).swapExactTokensForTokens(\n                amount, \n                minOut1, \n                path, \n                address(this), \n                block.timestamp + 300\n            );\n            intermediateAmount = amounts1[amounts1.length - 1];\n            \n            IERC20(path[1]).approve(address(_getBestRouter(true)), intermediateAmount);\n            address[] memory reversePath = _reverse(path);\n            uint256 minOut2 = _calculateMinOutput(intermediateAmount, reversePath, true);\n            _getBestRouter(true).swapExactTokensForTokens(\n                intermediateAmount, \n                minOut2, \n                reversePath, \n                address(this), \n                block.timestamp + 300\n            );\n        }\n    }\n    \n    function _executeTriangularSwap(\n        address asset,\n        uint256 amount,\n        address[] memory path\n    ) internal {\n        // Approve all routers\n        IERC20(asset).approve(address(uniV2RouterNew), amount);\n        IERC20(asset).approve(address(sushiRouterNew), amount);\n        \n        // Step 1: A -> B\n        address[] memory pathAB = new address[](2);\n        pathAB[0] = path[0];\n        pathAB[1] = path[1];\n        \n        uint256 minOut1 = _calculateMinOutput(amount, pathAB, false);\n        uint256[] memory amounts1 = uniV2RouterNew.swapExactTokensForTokens(\n            amount,\n            minOut1,\n            pathAB,\n            address(this),\n            block.timestamp + 300\n        );\n        uint256 amountB = amounts1[amounts1.length - 1];\n        \n        // Step 2: B -> C\n        address[] memory pathBC = new address[](2);\n        pathBC[0] = path[1];\n        pathBC[1] = path[2];\n        \n        IERC20(path[1]).approve(address(sushiRouterNew), amountB);\n        uint256 minOut2 = _calculateMinOutput(amountB, pathBC, true);\n        uint256[] memory amounts2 = sushiRouterNew.swapExactTokensForTokens(\n            amountB,\n            minOut2,\n            pathBC,\n            address(this),\n            block.timestamp + 300\n        );\n        uint256 amountC = amounts2[amounts2.length - 1];\n        \n        // Step 3: C -> A\n        address[] memory pathCA = new address[](2);\n        pathCA[0] = path[2];\n        pathCA[1] = path[0];\n        \n        IERC20(path[2]).approve(address(uniV2RouterNew), amountC);\n        uint256 minOut3 = _calculateMinOutput(amountC, pathCA, false);\n        uniV2RouterNew.swapExactTokensForTokens(\n            amountC,\n            minOut3,\n            pathCA,\n            address(this),\n            block.timestamp + 300\n        );\n    }\n    \n    function _getBestRouter(bool useSushi) internal view returns (IUniswapV2Router02) {\n        if (useSushi) {\n            return address(sushiRouterNew) != address(0) ? sushiRouterNew : sushiRouter;\n        } else {\n            return address(uniV2RouterNew) != address(0) ? uniV2RouterNew : uniRouter;\n        }\n    }\n\n    function _calculateMinOutput(\n        uint256 amountIn, \n        address[] memory path, \n        bool useSushi\n    ) internal view returns (uint256) {\n        uint256[] memory amounts;\n        IUniswapV2Router02 router = _getBestRouter(useSushi);\n        amounts = router.getAmountsOut(amountIn, path);\n        \n        uint256 expectedOut = amounts[amounts.length - 1];\n        return expectedOut * (10000 - slippageTolerance) / 10000;\n    }\n    \n    function _validatePriceFeeds(address[] memory path) internal view returns (bool) {\n        for (uint256 i = 0; i < path.length; i++) {\n            if (priceFeeds[path[i]] != address(0)) {\n                IAggregatorV3 priceFeed = IAggregatorV3(priceFeeds[path[i]]);\n                (, int256 price, , uint256 updatedAt, ) = priceFeed.latestRoundData();\n                require(price > 0, \"Invalid price\");\n                require(block.timestamp - updatedAt < 3600, \"Price too old\");\n            }\n        }\n        return true;\n    }\n    \n    function _selectOptimalProvider(address asset, uint256 amount) internal view returns (FlashLoanProvider) {\n        uint256 balancerMaxLoan = vault.maxFlashLoan(asset);\n        \n        if (balancerMaxLoan >= amount) {\n            return FlashLoanProvider.BALANCER;\n        }\n        \n        return FlashLoanProvider.AAVE;\n    }\n    \n    function _executeBalancerFlashLoan(\n        address asset,\n        uint256 amount,\n        address[] memory path,\n        bool sushiFirst,\n        uint256 expectedProfit,\n        bool isTriangular\n    ) internal {\n        address[] memory assets = new address[](1);\n        assets[0] = asset;\n        uint256[] memory amounts = new uint256[](1);\n        amounts[0] = amount;\n        \n        bytes memory userData = abi.encode(path, sushiFirst, expectedProfit, isTriangular);\n        \n        emit FlashLoanProviderSelected(FlashLoanProvider.BALANCER, asset, amount);\n        vault.flashLoan(address(this), assets, amounts, userData);\n    }\n    \n    function _executeAaveFlashLoan(\n        address asset,\n        uint256 amount,\n        address[] memory path,\n        bool sushiFirst,\n        uint256 expectedProfit,\n        bool isTriangular\n    ) internal {\n        bytes memory params = abi.encode(path, sushiFirst, expectedProfit, isTriangular);\n        \n        emit FlashLoanProviderSelected(FlashLoanProvider.AAVE, asset, amount);\n        aavePool.flashLoanSimple(address(this), asset, amount, params, 0);\n    }\n    \n    function executeOperation(\n        address asset,\n        uint256 amount,\n        uint256 premium,\n        address initiator,\n        bytes calldata params\n    ) external override returns (bool) {\n        require(msg.sender == address(aavePool), \"Only Aave pool\");\n        require(initiator == address(this), \"Invalid initiator\");\n        \n        (address[] memory path, bool sushiFirst, uint256 expectedProfit, bool isTriangular) = abi.decode(params, (address[], bool, uint256, bool));\n        \n        require(_validatePriceFeeds(path), \"Invalid price feed\");\n        \n        uint256 startingBal = IERC20(asset).balanceOf(address(this));\n        \n        if (isTriangular) {\n            _executeTriangularSwap(asset, amount, path);\n        } else {\n            _executeDualSwap(asset, amount, path, sushiFirst);\n        }\n        \n        uint256 received = IERC20(asset).balanceOf(address(this));\n        uint256 totalOwed = amount + premium;\n        require(received >= totalOwed, \"Unprofitable\");\n        \n        uint256 profit = received - totalOwed;\n        uint256 minProfitAdjusted = _calculateMinProfitWithFee(amount, premium);\n        require(profit >= minProfitAdjusted, \"Profit too low\");\n        \n        require(profit >= expectedProfit * 90 / 100, \"Profit deviation too high\");\n        \n        IERC20(asset).approve(address(aavePool), totalOwed);\n        \n        if (isTriangular) {\n            emit TriangularArbitrageExecuted(path[0], path[1], path[2], amount, profit);\n        } else {\n            emit ArbitrageExecuted(asset, amount, profit, sushiFirst);\n        }\n        \n        return true;\n    }\n    \n    function _calculateMinProfitWithFee(uint256 amount, uint256 premium) internal view returns (uint256) {\n        uint256 baseMinProfit = (amount * minProfitBps) / 10000;\n        return baseMinProfit + premium;\n    }\n\n    function withdraw(address token) external onlyOwner {\n        uint256 balance = IERC20(token).balanceOf(address(this));\n        require(balance > 0, \"No balance to withdraw\");\n        IERC20(token).transfer(owner(), balance);\n        emit ProfitWithdrawn(token, balance);\n    }\n    \n    function emergencyWithdraw(address token) external onlyOwner {\n        uint256 balance = IERC20(token).balanceOf(address(this));\n        if (balance > 0) {\n            IERC20(token).transfer(owner(), balance);\n        }\n    }\n    \n    function pause() external onlyOwner {\n        _pause();\n    }\n    \n    function unpause() external onlyOwner {\n        _unpause();\n    }\n\n    function _reverse(address[] memory path) internal pure returns (address[] memory rev) {\n        rev = new address[](path.length);\n        for (uint256 i = 0; i < path.length; i++) {\n            rev[i] = path[path.length - 1 - i];\n        }\n    }\n    \n    function simulateArbitrage(\n        address asset,\n        uint256 amount,\n        address[] calldata path,\n        bool sushiFirst\n    ) external view returns (uint256 profit) {\n        uint256[] memory amounts1;\n        uint256[] memory amounts2;\n        \n        IUniswapV2Router02 router1 = _getBestRouter(sushiFirst);\n        IUniswapV2Router02 router2 = _getBestRouter(!sushiFirst);\n        \n        if (sushiFirst) {\n            amounts1 = router1.getAmountsOut(amount, path);\n            amounts2 = router2.getAmountsOut(amounts1[amounts1.length - 1], _reverse(path));\n        } else {\n            amounts1 = router2.getAmountsOut(amount, path);\n            amounts2 = router1.getAmountsOut(amounts1[amounts1.length - 1], _reverse(path));\n        }\n        \n        uint256 finalAmount = amounts2[amounts2.length - 1];\n        if (finalAmount > amount) {\n            profit = finalAmount - amount;\n            \n            uint256 aaveFee = _calculateAaveFee(amount);\n            if (profit > aaveFee) {\n                profit = profit - aaveFee;\n            } else {\n                profit = 0;\n            }\n        } else {\n            profit = 0;\n        }\n    }\n    \n    function _calculateAaveFee(uint256 amount) internal view returns (uint256) {\n        uint128 feeBps = aavePool.FLASHLOAN_PREMIUM_TOTAL();\n        return (amount * feeBps) / 10000;\n    }\n    \n    function getOptimalProvider(address asset, uint256 amount) external view returns (FlashLoanProvider provider, uint256 fee) {\n        provider = _selectOptimalProvider(asset, amount);\n        \n        if (provider == FlashLoanProvider.BALANCER) {\n            fee = 0;\n        } else {\n            fee = _calculateAaveFee(amount);\n        }\n    }\n    \n    function simulateTriangularArbitrage(\n        address asset,\n        uint256 amount,\n        address[] calldata path\n    ) external view returns (uint256 profit) {\n        require(path.length == 4, \"Triangular path must have 4 tokens\");\n        require(path[0] == path[3], \"Path must start and end with same token\");\n        \n        // Step 1: A -> B\n        address[] memory pathAB = new address[](2);\n        pathAB[0] = path[0];\n        pathAB[1] = path[1];\n        uint256[] memory amounts1 = uniV2RouterNew.getAmountsOut(amount, pathAB);\n        uint256 amountB = amounts1[amounts1.length - 1];\n        \n        // Step 2: B -> C\n        address[] memory pathBC = new address[](2);\n        pathBC[0] = path[1];\n        pathBC[1] = path[2];\n        uint256[] memory amounts2 = sushiRouterNew.getAmountsOut(amountB, pathBC);\n        uint256 amountC = amounts2[amounts2.length - 1];\n        \n        // Step 3: C -> A\n        address[] memory pathCA = new address[](2);\n        pathCA[0] = path[2];\n        pathCA[1] = path[0];\n        uint256[] memory amounts3 = uniV2RouterNew.getAmountsOut(amountC, pathCA);\n        uint256 finalAmount = amounts3[amounts3.length - 1];\n        \n        if (finalAmount > amount) {\n            profit = finalAmount - amount;\n        } else {\n            profit = 0;\n        }\n    }\n}\n","sourceName":"contracts/FlashArbBotBalancer.sol"},"type":4}],"transactionHash":"0x97819244dfa552dc66a06b19fc3b0fab28da66980d17bb5bb34fadcdf18a6ed0"},"timestamp":"2025-07-17T16:33:36.708Z"}
{"code":"NETWORK_ERROR","level":"error","message":"❌ Initialization failed network is not available yet (code=NETWORK_ERROR, version=6.15.0)","shortMessage":"network is not available yet","stack":"Error: network is not available yet (code=NETWORK_ERROR, version=6.15.0)\n    at makeError (/workspaces/ARBBot2025/node_modules/ethers/src.ts/utils/errors.ts:698:21)\n    at assert (/workspaces/ARBBot2025/node_modules/ethers/src.ts/utils/errors.ts:719:25)\n    at JsonRpcProvider.get _network [as _network] (/workspaces/ARBBot2025/node_modules/ethers/src.ts/providers/provider-jsonrpc.ts:641:15)\n    at EnhancedMEVBot.initialize (/workspaces/ARBBot2025/scripts/run-bot.ts:510:40)\n    at processTicksAndRejections (node:internal/process/task_queues:105:5)\n    at async main (/workspaces/ARBBot2025/scripts/run-bot.ts:818:5)","timestamp":"2025-07-17T16:55:14.934Z"}
{"code":"NETWORK_ERROR","level":"error","message":"❌ Initialization failed network is not available yet (code=NETWORK_ERROR, version=6.15.0)","shortMessage":"network is not available yet","stack":"Error: network is not available yet (code=NETWORK_ERROR, version=6.15.0)\n    at makeError (/workspaces/ARBBot2025/node_modules/ethers/src.ts/utils/errors.ts:698:21)\n    at assert (/workspaces/ARBBot2025/node_modules/ethers/src.ts/utils/errors.ts:719:25)\n    at JsonRpcProvider.get _network [as _network] (/workspaces/ARBBot2025/node_modules/ethers/src.ts/providers/provider-jsonrpc.ts:641:15)\n    at EnhancedMEVBot.initialize (/workspaces/ARBBot2025/scripts/run-bot.ts:511:40)\n    at processTicksAndRejections (node:internal/process/task_queues:105:5)\n    at async main (/workspaces/ARBBot2025/scripts/run-bot.ts:819:5)","timestamp":"2025-07-17T16:55:26.398Z"}
{"level":"error","message":"❌ Initialization failed Cannot infer network params from chainId: 42161","name":"UnimplementedNetwork","stack":"UnimplementedNetwork: Cannot infer network params from chainId: 42161\n    at Object.getNetwork (/workspaces/ARBBot2025/node_modules/@flashbots/mev-share-client/src/api/networks.ts:36:11)\n    at Function.fromNetwork (/workspaces/ARBBot2025/node_modules/@flashbots/mev-share-client/src/client.ts:60:43)\n    at EnhancedMEVBot.initialize (/workspaces/ARBBot2025/scripts/run-bot.ts:509:44)\n    at processTicksAndRejections (node:internal/process/task_queues:105:5)\n    at async main (/workspaces/ARBBot2025/scripts/run-bot.ts:819:5)","timestamp":"2025-07-17T16:55:37.531Z"}
